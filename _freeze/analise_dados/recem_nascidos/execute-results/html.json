{
  "hash": "9738ef0b4bec9b4137417726d6675306",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Análise de dados: Recém-nascidos prematuros\"\nlang: pt\ntoc: true\ncode-annotations: \"hover\"\n---\n\n\n\nConsidere o conjunto de dados referente a um estudo sobre recém-nascidos prematuros de baixo peso. Os dados de cada recém-nascido estão dispostos em uma linha e cada coluna corresponde à informação de uma variável específica.\n\n## Objetivos\n\n-   Explorar os dados sobre recém-nascidos prematuros.\n\nFonte dos dados:\n\n- <https://raw.githubusercontent.com/tiagomartin/est104/refs/heads/master/dados/recem_nascidos.csv>\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload <- function(pkg){\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg))\n    install.packages(new.pkg, dependencies = TRUE)\n  sapply(pkg, require, character.only = TRUE)\n} # <1>\n\npackages <- c(\"tidyverse\", \"knitr\", \"DT\", \"readxl\") #<2>\nload(packages) # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntidyverse     knitr        DT    readxl \n     TRUE      TRUE      TRUE      TRUE \n```\n\n\n:::\n:::\n\n\n\n1. A função load verifica se os pacotes estão instalados em sua máquina. Se sim, faz o carregamento dos pacotes para a memória. Se não, instala os pacotes e os carrega para a memória.\n\n2. Carregando o pacote tidyverse, uma coleção de pacotes que facilitam a manipulação e visualização de dados. Os pacotes knitr e DT, para apresentar os resultados de forma mais amigável no arquivo final. O pacote readxl possui diversas funções para importação de dados do Excel.\n\n3. Retorna TRUE para todos os pacotes se forem carregados com sucesso.\n\n\n## Carregando os dados\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_brutos = read_csv2(\"https://raw.githubusercontent.com/tiagomartin/est104/refs/heads/master/dados/recem_nascidos.csv\") # <1>\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 48 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (3): pre_natal, sexo, desfecho\ndbl (6): registro, n_consultas, peso, comprimento, idade_gestacional, tempo_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n1. Importando a tabela disponível neste link, usando a função `read_csv()`. Essa função importa arquivos separados por vírgula `.csv2`), utilizando o ponto e vírgula (;) como separador. Após a importação, os dados são armazenados na variável `dados_brutos` \n\n\n## Conhecendo a base de dados\n\n- O que cada linha significa?\n- Quais são as variáveis presentes na base de dados?\n- Qual é o tipo de cada variável? É o esperado?\n<!-- - Tem alguma variável que seria interessante gerar a partir das informações presentes na base de dados? -->\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_brutos %>% \n  glimpse() # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 48\nColumns: 9\n$ registro          <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ pre_natal         <chr> \"N\", \"S\", \"N\", \"N\", \"N\", \"S\", \"N\", \"S\", \"N\", \"N\", \"N…\n$ n_consultas       <dbl> 0, 5, 0, 0, 0, 2, 0, 4, 0, 0, 0, 4, 0, 5, 1, 5, 4, 3…\n$ sexo              <chr> \"F\", \"M\", \"F\", \"F\", \"M\", \"F\", \"F\", \"M\", \"F\", \"M\", \"F…\n$ peso              <dbl> 750, 650, 650, 750, 800, 600, 940, 940, 900, 600, 61…\n$ comprimento       <dbl> 31, 32, 33, 33, 33, 34, 34, 34, 34, 28, 31, 31, 32, …\n$ idade_gestacional <dbl> 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, …\n$ tempo_permanencia <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 15, 75,…\n$ desfecho          <chr> \"O\", \"O\", \"O\", \"O\", \"O\", \"O\", \"O\", \"O\", \"O\", \"O\", \"O…\n```\n\n\n:::\n:::\n\n\n1. A função `glimpse()` é usada para visualizar um resumo da estrutura do conjunto de dados. Ela mostra o número de observações e variáveis, além de listar as variáveis presentes e seus tipos.\n\n\n\n## Análise exploratória\n\n### Quais são os desfechos presentes na base de dados?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_brutos  %>%  \n  distinct(desfecho) # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 1\n  desfecho\n  <chr>   \n1 O       \n2 V       \n```\n\n\n:::\n:::\n\n\n1. A função `distinct()` é usada para retornar apenas os valores únicos de uma variável (ou conjunto de variáveis).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}